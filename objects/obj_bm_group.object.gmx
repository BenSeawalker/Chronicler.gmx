<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rad1 = 32;
rad2 = rad1+string_width("Action")+16;

with(instance_create(x,y,obj_bubble_menu))
{
    x = other.x+lengthdir_x(other.rad2,90-25);
    y = other.y+lengthdir_y(other.rad2,90-25);
    
    title = "Action";
    action = create_action;
    minwidth = string_width("Condition")+10;
    minheight= string_height("Condition")+10;
    maxwidth = minwidth+10;
    maxheight = minheight+10;
    
    other.item[0] = id;
}
with(instance_create(x,y,obj_bubble_menu))
{
    x = other.x+lengthdir_x(other.rad2,0);
    y = other.y+lengthdir_y(other.rad2,0);
    
    title = "Bubble";
    action = create_bubble;
    minwidth = string_width("Condition")+10;
    minheight= string_height("Condition")+10;
    maxwidth = minwidth+10;
    maxheight = minheight+10;
    
    other.item[1] = id;
}
with(instance_create(x,y,obj_bubble_menu))
{
    x = other.x+lengthdir_x(other.rad2,270+25);
    y = other.y+lengthdir_y(other.rad2,270+25);
    
    title = "Condition";
    action = create_condition;
    minwidth = string_width(title)+10;
    minheight= string_height(title)+10;
    maxwidth = minwidth+10;
    maxheight = minheight+10;
    
    other.item[2] = id;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var mx,my;
    mx = window_mouse_get_x();
    my = window_mouse_get_y();

//rad1 = 40;
//rad2 = rad+max(item[0].width,item[1].width,item[2].width);
draw_sprite_ext(spr_light,0,x,y,12,12,0,c_white,.1);

var open = (!is_drag(obj_parent_bubble) &amp;&amp; !is_selected(obj_parent_bubble) &amp;&amp; !group_select &amp;&amp; in_ellipse(mx,my,0,y,rad2*2,rad2*2));
    x = lerp(x,(rad1/2)-rad2*2*!open,0.1*lag_time);
    y = window_get_height()/2;
    
if(!open) draw_arrow_colour(10,y,26,y,16,c_menu);

//draw center
draw_circle_colour(x,y,rad1,c_menu,c_menu,false);
draw_sprite(spr_choicescript,0,x,y);
    var c = c_black;
        if(in_ellipse(mx,my,x,y,rad1,rad1)) c = c_orange;
    draw_circle_colour(x,y,rad1,c,c,true);
    
    if(mouse_check_button_pressed(mb_left) &amp;&amp; c == c_orange)
    {
        show_variables();
    }
    

draw_circle_colour(x,y,rad2,c_menu,c_menu,true);


for(var i=0;i&lt;3;i++)
{
    with(item[i])
    {
        switch(i)
        {
            case 0:
                x = other.x+lengthdir_x(other.rad2,90-25);
                y = other.y+lengthdir_y(other.rad2,90-25);
            break;
            case 1:
                x = other.x+lengthdir_x(other.rad2,0);
                y = other.y+lengthdir_y(other.rad2,0);
            break;
            case 2:
                x = other.x+lengthdir_x(other.rad2,270+25);
                y = other.y+lengthdir_y(other.rad2,270+25);
            break;
        }
        
        hover = in_rect(mx,my,x-width/2,y-height/2,width,height);
        
        draw_roundrect_colour(x-width/2,y-height/2,x+width/2,y+height/2,c_menu,c_menu,false);
        draw_text_centered(x,y,title,c_text);
        c = c_black;
            if(hover) c = c_orange;
        draw_roundrect_colour(x-width/2,y-height/2,x+width/2,y+height/2,c,c,true);
        
        if(mouse_check_button_pressed(mb_left) &amp;&amp; hover &amp;&amp; script_exists(action))
        {
            script_execute(action);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
