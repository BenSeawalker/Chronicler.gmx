<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_parent_bubble</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>title = textbox_create();
    title.single_line = true;
comp = instance_create(x,y,obj_completion);
tbox = textbox_create();
    comp.tbox = tbox;
    comp.is_textbubble = true;
    
color_picker = noone;
    
colour = c_menu-20;
new = true;
    
choices = ds_list_create();
with(instance_create(0,0,obj_output))
{
    title = "O";
    owner = other.id;
    colour = make_color_rgb(81,68,116)+50;//(139,46,135);
    other.output = id;
    ds_list_add(other.choices,id);
}

with(instance_create(0,0,obj_add_choice))
{
    title = "+";
    owner = other.id
    other.add_choice = id;
    ds_list_add(other.choices,id);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(title) instance_destroy();
with(tbox) instance_destroy();
with(comp) instance_destroy();

ds_list_destroy(choices);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///textbox
if(mouse_check_button_pressed(mb_left) &amp;&amp; selected) tbox.read_only = (++clicks&lt;2);


if(textbox_focus == title)
{
    label = title.text;//get_label(title.text,UID);
    
    if(keyboard_check_pressed(vk_tab))
    {
        keyboard_clear(vk_tab);
        clicks = 3;
        textbox_focus = tbox;
        textbox_select = -1;
        tbox.read_only = false;
        
        textbox_select_clickline=textbox_select_mouseline textbox_select_clickpos=textbox_select_mousepos
        textbox_select_startline=textbox_select_mouseline textbox_select_startpos=textbox_select_mousepos
        textbox_select_endline=textbox_select_mouseline textbox_select_endpos=textbox_select_mousepos
    }
}
/*
if(textbox_focus == tbox)
{
    if(keyboard_check_pressed(vk_tab))
    {
        keyboard_clear(vk_tab);
        
        textbox_focus = title;
        textbox_select = -1;
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///choices
update_choice_positions(id);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///colour

var s = 20;
if(selected &amp;&amp; mouse_check_button_pressed(mb_left) &amp;&amp; in_rect(mouse_x,mouse_y,x+width-s-5,y+5,s,s))
{
    if(color_picker == noone)
    {
        color_picker = instance_create((x+width),y,obj_color_picker);
        with(color_picker)
        {
            hue = colour_get_hue(other.colour);
            sat = colour_get_saturation(other.colour);
            val = colour_get_value(other.colour);
            colour = other.colour;
            //event_user(0);
        }
    }
    else if(color_picker.destroy)
    {
        color_picker.maxw = 255;
        color_picker.destroy = false;
    }
    else
    {
        color_picker.maxw = 0;
        color_picker.destroy = true;
    }
}

//connections
if(use_choice_bubbles)
{
    if(output.link != noone &amp;&amp; output.link.object_index == obj_choice_bubble)
        output.link.colour = colour;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(color_picker != noone)
{
    color_picker.x = x+width;
    color_picker.y = y;
    colour = color_picker.colour;//make_colour_hsv(color_picker.hue,255/4,255);
    selected = selected || in_rect(mouse_x,mouse_y,x+width,y,255,32);
}
if(!selected)
{
    with(color_picker)
    {
        maxw = 0;
        destroy = true;
    }
    clicks = 0;
}
//highlight
var selcol = c_black;
if(selected || right_selected || group_selected || highlight) selcol = c_orange;


//title
    var h = string_height("W")+5;
draw_roundrect_colour(x+10,y-h-5,x+width/2+20,y+5,colour,colour,false);
draw_roundrect_colour(x+10,y-h-5,x+width/2+20,y+5,selcol,selcol,true);
if(selected || new)
{
    textbox_draw(title,x+5+10,y-h,x+width/2+15,y-5,false);
    new = false;
}
else
    textbox_draw_simple(title,x+5+10,y-h,x+width/2+15,y);


//text
draw_roundrect_colour(x,y,x+width,y+height,colour,colour,false);

//resize
var i = 20;
while(i &gt; 0)
{
    draw_line_width_colour(x+width-i,y+height,x+width,y+height-i,2,c_black,c_black);
    i -= 4;
}


var s = 20;
//text
draw_roundrect_colour(x,y,x+width,y+height,selcol,selcol,true);
if(clicks &gt; 2 || resize)
{
    textbox_draw(tbox,x+5,y+5,x+width-s-5,y+height-10,false);
}
else
    textbox_draw_simple(tbox,x+5,y+5,x+width-s-5,y+height-10);
    
    

var ccol = c_black;
    if(in_rect(mouse_x,mouse_y,x+width-s-5,y+5,s,s)) ccol = c_orange;
draw_sprite_stretched(spr_icons,1,x+width-s-5,y+5,s,s);
draw_rectangle_colour(x+width-s-5,y+5,x+width-5,y+s+5,ccol,ccol,ccol,ccol,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
