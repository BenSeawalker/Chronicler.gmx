<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_parent_bubble</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>choices = ds_list_create();

colour = c_menu-20;

owner = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var i=0;i&lt;ds_list_size(choices);i++)
{
    with(choices[|i])instance_destroy();
}
ds_list_destroy(choices);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>targetwidth = width;
targetheight = height;
resize = false;

if(owner != noone)
    owner.output.link = id;

/*
with(obj_bubble)
{
    if(output.link == other.id)
    {
        other.colour = colour;
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var mwidth = 0;
var mheight = 0;

var selcol = c_black;
    if(selected || right_selected || group_selected || highlight) selcol = c_orange;
draw_roundrect_colour(x,y,x+width,y+height,colour,colour,false);
    draw_roundrect_colour(x,y,x+width,y+height,selcol,selcol,true);


var cw,tw,offset;
    cw = 0;
    tw = 0;
    offset = 14;
//make sure they're all the same size
for(var i=0;i&lt;ds_list_size(choices);i++)
{
    with(choices[|i])
    {
        cwidth = max(string_width(cbox.text)+offset,48);//,view_wview[0]*.75);
        twidth = max(string_width(tbox.text)+offset,64*2);//,view_wview[0]*.75);
        
        if(!other.selected)// || is_drag(other.id))
        {
            cwidth = min(cwidth,64*8);
            twidth = min(twidth,64*8);
        }
        
        if(cwidth&gt;cw) cw = cwidth;
        if(twidth&gt;tw) tw = twidth;
    }
}

//actually do the drawing
for(var i=0;i&lt;ds_list_size(choices);i++)
{
    with(choices[|i])
    {
        colour = other.colour + 5;
        output.colour = other.colour;
        x = other.x+offset;
        
        var targy = other.y+8 + mheight + 8*i;
        var ymov = (other.y - other.yprevious);
            y = lerp(y,targy,0.05*lag_time) + ymov;
        
        moving = (abs(targy+ymov-y)&gt;2);
        
        var tc = c_text-30;
        cwidth = cw;
        twidth = tw;
        smw = cwidth+twidth+46+offset;
        
        hover = !is_drag(other.id) &amp;&amp; (hover || in_rect(mouse_x,mouse_y,x-12,y,12,height));
        
        //shadow
        var cshadow = colour+20;
        draw_set_alpha(1);
            draw_rectangle_colour(x-5,y-3,x+width-8,y+height+3,cshadow,cshadow,cshadow,cshadow,false);
            var selcol = c_black;
                if(hover &amp;&amp; other.selected) selcol = c_orange;
            draw_rectangle_colour(x-5,y-3,x+width-8,y+height+3,selcol,selcol,selcol,selcol,true);
        draw_set_alpha(1);
        
        //cbox
        draw_rectangle_colour(x,y,x+cwidth,y+height,tc,tc,tc,tc,false);
        if((other.selected &amp;&amp; !moving) || new)
            textbox_draw(cbox,x,y,x+cwidth,y+height,false);
        else
            textbox_draw_simple(cbox,x,y,x+cwidth,y+height);
        
        //tbox
        var xx = x+offset+cwidth;
        draw_arrow_colour(xx,y+height/2,xx+15,y+height/2,16,tc);
        draw_rectangle_colour(xx+20,y,xx+20+twidth,y+height,tc,tc,tc,tc,false);
        if((other.selected &amp;&amp; !moving) || new)
        {
            textbox_draw(tbox,xx+25,y,xx+25+twidth-5,y+height,false);
            new = false;
        }
        else
            textbox_draw_simple(tbox,xx+25,y,xx+25+twidth-5,y+height);
        
        // || in_rect(mouse_x,mouse_y,x+width-14,y,12,12);
        if(hover &amp;&amp; !is_drag(owner) &amp;&amp; is_selected(owner) &amp;&amp; ds_list_size(owner.choices)&gt;1)
        {
            //delete
            xx = xx+twidth+offset+8;
            var ds = 14;
            draw_rectangle_colour(xx,y,xx+ds,y+ds,c_red,c_red,c_red,c_red,false);
            draw_line_colour(xx+2,y+2,xx+ds-2,y+ds-2,c_white,c_white);
            draw_line_colour(xx+2,y+ds-2,xx+ds-2,y+2,c_white,c_white);
            if(in_rect(mouse_x,mouse_y,xx,y,ds,ds))
            {
                draw_rectangle_colour(xx,y,xx+ds,y+ds,c_orange,c_orange,c_orange,c_orange,true);
                if(mouse_check_button_pressed(mb_left))
                {
                    ds_list_delete(other.choices,i);
                    instance_destroy();
                    exit;
                }
            }
            //shift up
            draw_sprite_ext(spr_arrow,1,x-12,y,1,1,0,colour-20,1);
                if(in_rect(mouse_x,mouse_y,x-12,y,12,12))
                {
                    draw_rectangle_colour(x-12,y,x,y+12,c_orange,c_orange,c_orange,c_orange,true);
                    if(mouse_check_button_pressed(mb_left) &amp;&amp; i&gt;0)
                    {
                        var tmp = other.choices[|i-1];
                        other.choices[|i-1] = id;
                        other.choices[|i] = tmp;
                        mouse_clear(mb_left);
                    }
                }
            //shift down
            draw_sprite_ext(spr_arrow,1,x-12,y+height,-1,1,180,colour-20,1);
            if(in_rect(mouse_x,mouse_y,x-12,y+height,12,-12))
            {
                draw_rectangle_colour(x-12,y+height-12,x,y+height,c_orange,c_orange,c_orange,c_orange,true);
                if(mouse_check_button_pressed(mb_left) &amp;&amp; i&lt;ds_list_size(other.choices)-1)
                {
                    var tmp = other.choices[|i+1];
                    other.choices[|i+1] = id;
                    other.choices[|i] = tmp;
                    mouse_clear(mb_left);
                }
            }
        }
        
        //border
        //draw_rectangle_colour(x-5,y-1,x+width-8,y+height+1,c_black,c_black,c_black,c_black,true);
        
        width = smw;
        if(width &gt; mwidth) mwidth = width;
        mheight += height;
    }
}

mwidth += offset;
mheight += 8+8*ds_list_size(choices);

//draw add choice
    var add_width = 32;
    selcol = c_black;
        if(selected &amp;&amp; in_rect(mouse_x,mouse_y,x+width/2-add_width/2,y+mheight,add_width,add_width)) selcol = c_orange;
        
    draw_rectangle_colour(x+width/2-add_width/2,y+mheight,x+width/2+add_width/2,y+mheight+add_width,colour+5,colour+5,colour+5,colour+5,false);
        draw_rectangle_colour(x+width/2-add_width/2,y+mheight,x+width/2+add_width/2,y+mheight+add_width,selcol,selcol,selcol,selcol,true);
        draw_text_centered(x+width/2,y+mheight+add_width/2,"+",c_text);
        
    if(mouse_check_button_pressed(mb_left) &amp;&amp; selcol = c_orange)
    {
        var c = instance_create(x,y+mheight,obj_bchoice);
            c.y -= c.height;
            c.owner = id;
            ds_list_add(choices,c);
    }
    
    mheight += add_width+8;

targetwidth = mwidth;
targetheight = mheight;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
