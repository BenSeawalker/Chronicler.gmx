<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999999999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tbox = -1;

down = true;

tempactive = false;
active = false;

highlight = 0;

txt = "";
htxt = "";

options = -1;

is_textbubble = false;
is_stat = false;

lstsize = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(options != -1)
{
    ds_list_destroy(options);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///input

if(keyboard_check_pressed(vk_escape))
{
    if(!active)
        tempactive = !tempactive;
    else if(lstsize == 0)
        tempactive = true;
    else
        tempactive = false;
    active = false; 
}
if(keyboard_check_pressed(vk_backspace) || keyboard_check_pressed(vk_space) ||
    keyboard_check_pressed(vk_enter) || keyboard_check_pressed(vk_tab)) active = true;

if(!(textbox_focus == tbox &amp;&amp; !tbox.read_only &amp;&amp; !pause)){tempactive = false; active = false;}
if(textbox_focus == tbox &amp;&amp; textbox_focus != textbox_lastfocus) active = true;


if((active || tempactive) &amp;&amp; htxt != "")
{
    if(keyboard_check_pressed(vk_up))// &amp;&amp; highlight &gt; 0)
    {
        keyboard_clear(vk_up);
        highlight--;
    }
    if(keyboard_check_pressed(vk_down))// &amp;&amp; highlight &lt; lstsize-1)
    {
        keyboard_clear(vk_down);
        highlight++;
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///active
if(active || tempactive)
{   
    x=tbox.x+string_width(string_replace_all(string_copy(tbox.line[textbox_select_mouseline],1,textbox_select_mousepos),"#","\#"));
    y=tbox.y+(textbox_select_mouseline-tbox.start)*string_height("W")+string_height("W");
    

    if (tbox.single_line)
    {
        x-=string_width(string_replace_all(string_copy(tbox.line[textbox_select_mouseline],1,tbox.start),"#","\#"))
        y=tbox.y+string_height("W");
    }
        var ch = 0;
        var char = "";
        for(ch=textbox_select_mousepos;ch&gt;0;ch--)
        {
            char = string_char_at(tbox.line[textbox_select_mouseline],ch);
            if(char == " " || char == chr(9) || char == chr(10) || char == "{" || char == "}" || char == "$")
                break;
        }
        txt = string_trim(string_copy(tbox.line[textbox_select_mouseline],ch+1*(ch&gt;0),textbox_select_mousepos-ch));

        
        var mback = 0;
        while((char == "{" || char == "$") &amp;&amp; ch &gt; 0)
        {
            ch--;
            mback++;
            char = string_char_at(tbox.line[textbox_select_mouseline],ch);
        }
        
        
        
        if(htxt != "")
        {
            if(keyboard_check_pressed(vk_tab))// || keyboard_check_pressed(vk_enter))
            {
                //so the textbox doesn't read them...
                keyboard_clear(vk_tab);
                //keyboard_clear(vk_enter);
                active = false;
                tempactive = false;
                
                
                var str = tbox.line[textbox_select_mouseline];
                var insert = htxt;
                    if(is_textbubble &amp;&amp; !string_pos("*",htxt)) insert = "${"+htxt+"}";
                var str2 = string_copy(str,1,ch) + insert;// + 
                    if(string_length(str)&gt;textbox_select_mousepos) str2 += string_copy(str,min(textbox_select_mousepos+1,string_length(str)),string_length(str));
                
                tbox.line[textbox_select_mouseline] = str2;
                textbox_select_mousepos = min(ch+string_length(insert),string_length(str2));
                
                
                var realstartpos,realendpos;
                    realstartpos = 0;
                    for(var i=0;i&lt;textbox_select_mouseline;i++)
                    {
                        realstartpos += string_length(tbox.line[i])+(!tbox.line_wrap[i+1] &amp;&amp; !tbox.line_single[i]);
                    }
                    realstartpos += ch+1;
                    realendpos = realstartpos + string_length(txt) + mback + 1;
                    
                    var endstr = string_copy(tbox.text,min(realendpos-1,string_length(tbox.text)+1),string_length(tbox.text))
                    var spcr = string_char_at(tbox.text,realendpos-1);
                        if(string_count(chr(10),endstr)) spcr = chr(10);
                        
                tbox.text = string_copy(tbox.text,1,realstartpos-1) + insert + spcr +
                            string_copy(tbox.text,min(realendpos,string_length(tbox.text)+1),string_length(tbox.text));
                tbox.last_text = tbox.text;
                
                textbox_select_clickline=textbox_select_mouseline textbox_select_clickpos=textbox_select_mousepos
                textbox_select_startline=textbox_select_mouseline textbox_select_startpos=textbox_select_mousepos
                textbox_select_endline=textbox_select_mouseline textbox_select_endpos=textbox_select_mousepos
            }
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(active || tempactive)
{
    var h;
        h = string_height("W");
        
    //populate list
    var lst = ds_list_create();
    
    //weed out uneeded
    if(options == -1)
    {
        if(!is_textbubble &amp;&amp; !is_stat)
        {
            ds_list_copy(lst,actionlist);
        }
        else if(is_textbubble &amp;&amp; !is_stat)
        {
            ds_list_add(lst,"*line_break");
            ds_list_add(lst,"*page_break");
        }
        with(obj_variable) if(type == vartype_global)
            ds_list_add(lst,name.text);
        with(obj_variable) if(type == vartype_temp &amp;&amp; ds_list_find_index(current_scene.tempvars,id)&gt;-1)
            ds_list_add(lst,name.text);
    }
    else
    {
        ds_list_copy(lst,options);
    }
    if(txt != "" || active)
    {
        for(var i=0;i&lt;ds_list_size(lst);i++)
        {
            if(string_pos(txt,lst[|i]) != 1 || txt == lst[|i])
            {
                //if(!is_textbubble)
                //{
                    ds_list_delete(lst,i);
                    i--;
                /*}
                else if(!string_pos(txt,lst[|i]))
                {
                    ds_list_delete(lst,i);
                    i--;
                }*/
            }
        }
    }
    lstsize = ds_list_size(lst);
    
    //show_debug_message("|"+txt+"|");
    if(ds_list_size(lst) || (tempactive))
    {
        //show_debug_message("|"+txt+"|");
        highlight = clamp(highlight,0,ds_list_size(lst)-1);
        var width,height;
            width = 0;
            height = min(h*10,h*ds_list_size(lst));
            for(var i=max(0,highlight-((height/h)/2));i&lt;ds_list_size(lst);i++)
            {
                width = max(width,string_width(lst[|i])+8);
            }
        
            
        //draw background
        if(down)
        {
            draw_rectangle_colour(x,y,x+width,y+height,c_menu,c_menu,c_menu,c_menu,false);
                draw_rectangle_colour(x,y,x+width,y+height,c_menu,c_menu,c_menu,c_menu,true);
        }
        else
        {
            draw_rectangle_colour(x,y,x+width,y-height,c_menu,c_menu,c_menu,c_menu,false);
                draw_rectangle_colour(x,y,x+width,y-height,c_menu,c_menu,c_menu,c_menu,true);
        }
        
        
        for(var i=max(0,highlight-((height/h)/2));i&lt;ds_list_size(lst);i++)
        {
            var pos = (i-max(0,highlight-((height/h)/2)))
            if(pos*h &gt;= height) break;
            
            if(down)
            {
                if(i == highlight)
                {
                    draw_set_alpha(0.1);
                        draw_rectangle_colour(x+2,y+2+pos*h,x+width-2,y+2+pos*h+h,c_aqua,c_aqua,c_aqua,c_aqua,false);
                    draw_set_alpha(1);
                }
                draw_rectangle_colour(x+2,y+2+pos*h,x+width-2,y+2+pos*h+h,c_black,c_black,c_black,c_black,true);
                
                draw_text_colour(x+4,y+4+pos*h,lst[|i],c_text,c_text,c_text,c_text,1);
            }
            else
            {
                if(i == highlight)
                {
                    draw_set_alpha(0.1);
                        draw_rectangle_colour(x+2,y-2-pos*h,x+width-2,y-2-pos*h-h,c_aqua,c_aqua,c_aqua,c_aqua,false);
                    draw_set_alpha(1);
                }
                draw_rectangle_colour(x+2,y-4-pos*h,x+width-2,y-4-pos*h-h,c_black,c_black,c_black,c_black,true);
                
                draw_text_colour(x+4,y-2-pos*h,lst[|i],c_text,c_text,c_text,c_text,1);
            }
        }
        
        htxt = lst[|highlight];
        
    }
    else
    {
        htxt = "";
        lstsize = 0;
    }
    
    ds_list_destroy(lst);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
