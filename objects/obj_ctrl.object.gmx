<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///variables
globalvar GUID, group_select, save_path,project_path,stats_path,saved, project_name, font_current,
            gamevars,gamestats, scene_list,current_scene, allbubbles,allchoices,program_version
            var_screen,GUI_mode, aspect_ratio,view_scale,
            clipboard, pause, lag_time, actionlist, refactorvars, use_choice_bubbles;
            
program_version = "1.3.5";
GUID = 0;
project_name = "";
save_path = "";
saved = false;
gamestats = "";
stats_path = "";
project_path = "";
clipboard = ds_list_create();

lag_time = 1;
pause = false;
refactorvars = true;
use_choice_bubbles = true;

instance_create(mouse_x,mouse_y,obj_mlink);
instance_create(0,0,obj_undo);


program_update = -1;

draw_set_font(fnt_main);
GUI_mode = true;

var_screen = instance_create(0,0,obj_var_group);
    create_variable(var_screen,vartype_title,"My Awesome Game!","",false);
    create_variable(var_screen,vartype_author,"Your name here...","",false);

allbubbles = ds_list_create();
allchoices = ds_list_create();

current_scene = noone;
scene_list = instance_create(room_width,room_height/2,obj_scene_group);


font_current = fnt_main;
draw_set_font(font_current);
gamevars = ""


action = -1;


mheld = false;

mx = mouse_x;
my = mouse_y;
can_select = false;
group_select = false;

move_screen = false;
view_dir = 0;
view_speed = 0;

highlight_list = ds_list_create();

aspect_ratio = view_wport[0]/view_hport[0];
view_scale = 1;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///actionlist

actionlist = ds_list_create();
    ds_list_add(actionlist,"*set");
    ds_list_add(actionlist,"*goto");
    ds_list_add(actionlist,"*line_break");
    ds_list_add(actionlist,"*page_break");
    ds_list_add(actionlist,"*input_text");
    ds_list_add(actionlist,"*input_number");
    ds_list_add(actionlist,"*rand");
    ds_list_add(actionlist,"*finish");
    ds_list_add(actionlist,"*ending");
    ds_list_add(actionlist,"*goto_scene");
    ds_list_add(actionlist,"*label");
    ds_list_add(actionlist,"*check_purchase");
    ds_list_add(actionlist,"*purchase");
    ds_list_add(actionlist,"*advertisement");
    ds_list_add(actionlist,"*stat_chart");
    ds_list_add(actionlist,"*if");
    ds_list_add(actionlist,"*elseif");
    ds_list_add(actionlist,"*bug");
    ds_list_add(actionlist,"*hide_reuse");
    ds_list_add(actionlist,"*disable_reuse");
    ds_list_add(actionlist,"*allow_reuse");
    ds_list_add(actionlist,"*gosub");
    ds_list_add(actionlist,"*return");
    ds_list_add(actionlist,"*setref");
    ds_list_add(actionlist,"*gotoref");
    ds_list_add(actionlist,"adfree");
    ds_list_add(actionlist,"choice_purchase_supported");
    ds_list_add(actionlist,"choice_purchased_adfree");
    ds_list_add(actionlist,"choice_is_web");
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///menu
var w = sprite_get_width(spr_icons);
var i = 150;//150
var off = 10;

var fm = instance_create(i,0,obj_file_menu);
    fm.startw = window_get_width()-i*2;
    
    //left
    add_file_component(fm,fm_left,spr_icons,49,new_project_ask,"New Project");
    add_file_component(fm,fm_left,spr_icons,101,load_chronicler_project,"Load Project");
    add_file_component(fm,fm_left,spr_icons,162,load_cs_project,"Import Project");
    add_file_component(fm,fm_left,spr_icons,15,save_project,"Save Project");
    add_file_component(fm,fm_left,spr_icons,160,save_project_as,"Save Project As");
    //right
    //add_file_component(fm,fm_right,spr_icons,161,load_cs_project,"Import ChoiceScript Project");
    add_file_component(fm,fm_right,spr_icons,161,show_choicescript,"Show Choicescript");
    add_file_component(fm,fm_right,spr_icons,89,show_stats,"Show Stats Screen");
    add_file_component(fm,fm_right,spr_icons,114,show_license,"License Information");
    //center
    add_file_component(fm,fm_center,spr_icons,4,-1,"Settings (Unavailable)");
    add_file_component(fm,fm_center,spr_icons,10,show_website,"Website");
    
instance_create(0,window_get_height()/2,obj_bm_group);
//var sg = instance_create(0,0,obj_sidebar_group);    

/*
var sb = create_sidebar(0,0,"File",true);
    add_sidebar_component(sb,"New",c_text,c_black,new_project_ask);
    add_sidebar_component(sb,"Load",c_text,c_black,load_chronicler_project);
    add_sidebar_component(sb,"Save Project",c_text,c_black,save_project);
    add_sidebar_component(sb,"Save Project As",c_text,c_black,save_project_as);
    add_sidebar_component(sb,"Save ChoiceScript",c_text,c_black,save_choicescript);
    add_sidebar_component(sb,"Show ChoiceScript",c_text,c_black,show_choicescript);
add_sidebar_to_group(sg,sb);
*/
/*
var sb = create_sidebar(0,0,"Game",true);
    add_sidebar_component(sb,"Variables",c_gray,c_white,show_variables);
    add_sidebar_component(sb,"Bubble",c_teal,c_white,create_bubble);
    add_sidebar_component(sb,"Condition",c_blue,c_white,create_condition);
    add_sidebar_component(sb,"Action",c_purple,c_white,create_action);   
add_sidebar_to_group(sg,sb);
*/

new_project();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///LINUX

//public
//program_update = http_get_file("https://dl.orangedox.com/UynAG2hoTsUhWvUZtG/Chronicler_Version.ini?dl=1","Chronicler_Version.ini");

//debug
//program_update = http_get_file("https://www.dropbox.com/s/ganfrnhpwrvh1ay/Chronicler_Version.ini?dl=1","Chronicler_Version.ini");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///load autosave / last opened scene

ini_open("settings.ini");
    //read
    var successful = ini_read_real("autosave","shutdown",true);
    project_path = ini_read_string("project","last_save","");
    
    //write
    ini_write_real("autosave","shutdown",false);
ini_close();

var cont = true;
if(!successful)
{
    if(show_question("It appears that Chronicler did not shut down correctly the last time it was run.##Do you wish to load the last autosave?"))
    {
        load_chronicler_project("autosave.chron");
        cont = false;
        project_path = "";
        save_path = "";
    }
}

if(cont)
{
    if(project_path != "" &amp;&amp; !string_pos("autosave.chron",project_path) &amp;&amp; FS_file_exists(project_path))
    {
        show_debug_message(project_path);
        load_chronicler_project(project_path);
        add_undo();
        save_path = project_path;
    }
    else
    {
        new_project();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///autosave
alarm[1] = room_speed*10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///autosave
if(mouse_check_button(mb_middle) || keyboard_check(vk_space) || var_screen.visible || instance_exists(obj_message_callback) || group_select)
{
    alarm[1] = room_speed;
    exit;
}
    
if(!var_screen.visible &amp;&amp; !instance_exists(obj_message_callback))
{
    var lst = data_to_list();
        var f = file_text_open_write("autosave.chron");
            file_text_write_string(f,ds_list_write(lst));
        file_text_close(f);
    
    ds_list_destroy(lst);
}

alarm[1] = room_speed*60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>script_execute(action);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///lag_time

lag_time = room_speed/1000000*delta_time;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///pause
window_resizeViewToWindow(0);

//if(keyboard_check_pressed(ord('P')))
//    pause = !pause;

if(pause) exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///view


var editing = textbox_focus;

//zoom
if(!instance_exists(obj_message_callback) &amp;&amp; !var_screen.visible &amp;&amp; textbox_focus = -1)
{
    var scale = 0.125;
    if(mouse_wheel_down() || (keyboard_check_pressed(ord('Q'))))// &amp;&amp; !editing))
    {
        set_view_scale(max(view_scale-scale,scale));
    }
    if(mouse_wheel_up() || (keyboard_check_pressed(ord('E'))))// &amp;&amp; !editing))
    {
        set_view_scale(min(view_scale+scale,2));
    }
}



//set caption
window_set_caption("Chronicler v"+program_version+" - "+project_name+"    "+"Scale:"+string(view_scale)+" FPS:"+string(fps));


if(!editing)
{
    //move view
    var mspd = 6*(1/view_scale)*lag_time;
    view_yview -= keyboard_check(vk_up)*mspd;
    view_yview += keyboard_check(vk_down)*mspd;
    view_xview -= keyboard_check(vk_left)*mspd;
    view_xview += keyboard_check(vk_right)*mspd;
}

var wmx,wmy;
wmx = window_mouse_get_x();
wmy = window_mouse_get_y();
if(mouse_check_button_pressed(mb_middle) or keyboard_check_pressed(vk_space))
{
    move_screen = true;
    if(keyboard_check(vk_space)) with(obj_parent_bubble) if(selected) {other.move_screen=false; break;}
    mx = wmx;
    my = wmy;
    //move_screen = (bubble_at_point(mouse_x,mouse_y) == noone &amp;&amp; !sel);
}
    if(move_screen)
    {
        //deselect_all(noone);
        view_dir = point_direction(wmx,wmy,mx,my);
        view_speed = min(point_distance(wmx,wmy,mx,my)*(1/view_scale),60);
    }
    if(abs(view_speed))
    {
        view_xview[0] += lengthdir_x(view_speed*lag_time,view_dir);//v_hspeed;
        view_yview[0] += lengthdir_y(view_speed*lag_time,view_dir);//v_vspeed;
        if(view_speed)
            view_speed = max(0,view_speed-.5*lag_time);
        else if(view_speed!=0)
            view_speed = min(0,view_speed+.5*lag_time);
        
        mx = wmx;
        my = wmy;
    }
if(mouse_check_button_released(mb_middle) or keyboard_check_released(vk_space))
{
    move_screen = false;
}




if(!instance_exists(obj_message_callback) &amp;&amp; !var_screen.visible)
{
    var miny,minx,maxy,maxx;
        miny = 0;
        minx = 0;
        maxy = view_hview[0];
        maxx = view_wview[0];
    
    with(obj_parent_bubble)
    {
        if(y-view_hview[0]*2 &lt; miny)
            miny = y-view_hview[0]*2;
        if(x-view_wview[0]*2 &lt; minx)
            minx = x-view_wview[0]*2;
        
        if(y-view_hview[0]/5 &gt; maxy)
            maxy = y-view_hview[0]/5;
        if(x-view_wview[0]/5 &gt; maxx)
            maxx = x-view_wview[0]/5;
    }
    
    view_xview[0] = clamp(view_xview[0],minx,maxx);
    view_yview[0] = clamp(view_yview[0],miny,maxy);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///keyboard input
var sel = instance_exists(obj_message);
with(obj_parent_bubble) if(selected &amp;&amp; clicks&gt;1) {sel = true; break;}


if(keyboard_check(vk_control))
{
    //ctrl+ *
    
    //select_all
    if(keyboard_check_pressed(ord('A')))
    {
        if(!is_selected(obj_parent_bubble) &amp;&amp; !is_drag(obj_parent_bubble))
        {
            with(obj_parent_bubble)
            {
                group_selected = true;
                group_xoff = mouse_x-x;
                group_yoff = mouse_y-y;
            }
        }
    }
    
    //shortcuts
    if(!sel)
    {      
      if(keyboard_check_pressed(ord('R')))
      {
        set_view_scale(1);
        view_xview[0] = 0;
        view_yview[0] = 0;
      }
    }
    
    //save
    if(keyboard_check_pressed(ord('S')) &amp;&amp; !instance_exists(obj_message_callback) &amp;&amp; !var_screen.visible)
    {
        var vx = view_xview[0];
        var vy = view_yview[0];
        
        save_project();
        //save_choicescript();
        
        view_xview[0] = vx;
        view_yview[0] = vy;
        group_select = false;
        obj_ctrl.can_group = false;
        obj_ctrl.mx = mouse_x;
        obj_ctrl.my = mouse_y;
    }
    //load
    if(keyboard_check_pressed(ord('L')) &amp;&amp; !instance_exists(obj_message_callback)) load_chronicler_project();
}

if(!sel &amp;&amp; textbox_focus == -1 &amp;&amp; !instance_exists(obj_message_callback) &amp;&amp; !var_screen.visible)
{
    var c = noone;
    with(obj_choice)if(selected) {c=id; break;}
    if(c == noone)
        with(obj_bubble)if(selected &amp;&amp; ds_list_size(choices&lt;=2)){c=output; break;}
    if(c == noone)
        with(obj_action)if(selected){c=output; break;}
        
    var b = noone;
    if(keyboard_check_pressed(ord('1'))) b = instance_create(mouse_x,mouse_y,obj_bubble);
    if(keyboard_check_pressed(ord('2'))) b = instance_create(mouse_x,mouse_y,obj_condition);
    if(keyboard_check_pressed(ord('3'))) b = instance_create(mouse_x,mouse_y,obj_action);
    
    //if(keyboard_check_pressed(ord('4'))) b = instance_create(mouse_x,mouse_y,obj_choice_bubble);
    
    if(c != noone &amp;&amp; b != noone)
    {
        c.link = b;
    }
}

//drag select
if(mouse_check_button_pressed(mb_left))
{
    mx = mouse_x;
    my = mouse_y;
    can_group = (bubble_at_point(mx,my) == noone &amp;&amp; choice_at_point(mx,my) == noone);
}
if(mouse_check_button(mb_left))
{
    //with(obj_choice_parent) if(link==obj_mlink){other.can_group = false; break;}
    group_select = (can_group &amp;&amp; point_distance(mx,my,mouse_x,mouse_y)&gt;32)
}
if(mouse_check_button(mb_middle) &amp;&amp; (can_group || group_select))
{
    mx = mouse_x;
    my = mouse_y;
    can_group = false;
    group_select = false;
}
if(mouse_check_button_released(mb_left))
{
    if(group_select)
    {
        with(obj_parent_bubble)
        {
            if(highlight)
            {
                highlight = false;
                group_selected = true;
                group_xoff = mouse_x-x;
                group_yoff = mouse_y-y;
            }
        }
        mouse_clear(mb_left);
    }
    group_select = false;
}

if(group_select)
{
    with(obj_parent_bubble)
    {
        highlight = in_rect(x,y,other.mx,other.my,mouse_x-other.mx,mouse_y-other.my) &amp;&amp;
                    in_rect(x+width,y+height,other.mx,other.my,mouse_x-other.mx,mouse_y-other.my);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///copy / paste


//mass delete
with(obj_parent_bubble)
{
     if(keyboard_check_pressed(vk_delete) &amp;&amp; group_selected) instance_destroy();
}


if(keyboard_check(vk_control) &amp;&amp; (keyboard_check_pressed(ord('C')) || keyboard_check_pressed(ord('X'))))
{
    //clear clipboard data
    clear_clipboard();
    
    //add highlighted bubbles to clipboard
    with(obj_parent_bubble) if(group_selected || selected)
    {
        if(object_index == obj_choice_bubble)
        {
            var mp2 = copy_bubble(owner);
            ds_list_add(clipboard,mp2);
        }
        
        var mp = copy_bubble(id);
        ds_list_add(clipboard,mp);
    }
}

if(!is_selected(obj_parent_bubble) &amp;&amp; !is_drag(obj_parent_bubble))
{
    
    //paste bubbles from clipboard
    if(keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord('V')))
    {
        var copied = ds_list_create();
        for(var i=0;i&lt;ds_list_size(clipboard);i++)
        {
            var mp = clipboard[|i];
            with(instance_create(mouse_x+mp[?"x"],mouse_y+mp[?"y"],mp[?"type"]))
            {
                ds_list_add(copied,id);
                TUID = mp[?"UID"];
                
                tbox.text = mp[?"tbox"];
                
                switch(object_index)
                {
                    case obj_bubble:
                        title.text = mp[?"title"];
                        
                        width = mp[?"width"];
                        height = mp[?"height"];
                        targetwidth = width;
                        targetheight = height;
                        
                        colour = mp[?"colour"];
                        
                        output.link = mp[?"output"];
                        
                        var s = 20;
                        textbox_draw(tbox,x+5,y+5,x+width-s-5,y+width-10,false);
                        
                        var cs = mp[?"choices"];
                            for(var ii=1;ii&lt;ds_list_size(cs)-1;ii++)
                            {
                                var cm = cs[|ii];
                                var c = create_choice(cm[?"tbox"]);
                                    c.cbox.text = cm[?"cbox"];
                                    c.link = cm[?"link"];
                                    c.owner = id;
                                add_choice_to_bubble(id,c);
                            }
                        
                    break;
                    
                    case obj_condition:
                        out_true.link = mp[?"out_true"];
                            out_true.owner = id;
                        out_false.link = mp[?"out_false"];
                            out_false.owner = id;
                    break;
                    
                    case obj_action:
                        output.link = mp[?"output"];
                            output.owner = id;
                    break;
                    
                    case obj_choice_bubble:
                        var cs = mp[?"choices"];
                        for(var ii=0;ii&lt;ds_list_size(cs);ii++)
                        {
                            show_debug_message(string(ii));
                            var cm = cs[|ii];
                            var c = instance_create(x,y,obj_bchoice);//create_choice(cm[?"tbox"]);
                                c.tbox.text = cm[?"tbox"];
                                c.cbox.text = cm[?"cbox"];
                                c.output.link = cm[?"link"];
                                c.owner = id;
                            add_choice_to_bubble(id,c);
                        }
                    break;
                }
                
                
            }
        }
        //connect them up
        for(var i=0;i&lt;ds_list_size(copied);i++)
        {
            with(copied[|i])
            {
                switch(object_index)
                {
                    case obj_bubble:
                        var found = false;
                        for(var iii=0;iii&lt;ds_list_size(copied);iii++)
                        {
                            if(output.link == copied[|iii].TUID)
                            {
                                output.link = copied[|iii];
                                found = true;
                                break;
                            }
                        }
                        if(!found)
                            output.link = noone;
                        
                        for(var ii=1;ii&lt;ds_list_size(choices)-1;ii++)
                        {
                            var c = choices[|ii];
                            found = false;
                            for(var iii=0;iii&lt;ds_list_size(copied);iii++)
                            {
                                if(c.link == copied[|iii].TUID)
                                {
                                    c.link = copied[|iii];
                                    found = true;
                                    break;
                                }
                            }
                            if(!found)
                                c.link = noone;
                        }
                    break;
                    
                    case obj_condition:
                        var ft = false;
                        var ff = false;
                        for(var iii=0;iii&lt;ds_list_size(copied);iii++)
                        {
                            if(out_true.link == copied[|iii].TUID)
                            {
                                out_true.link = copied[|iii];
                                ft = true;
                            }
                            if(out_false.link == copied[|iii].TUID)
                            {
                                out_false.link = copied[|iii];
                                ff = true;
                            }
                        }
                        if(!ft)
                            out_true.link = noone;
                        if(!ff)
                            out_false.link = noone;
                    break;
                    
                    case obj_action:
                        var found = false;
                        for(var iii=0;iii&lt;ds_list_size(copied);iii++)
                        {
                            if(output.link == copied[|iii].TUID)
                            {
                                output.link = copied[|iii];
                                found = true;
                                break;
                            }
                        }
                        if(!found)
                            output.link = noone;
                    break;
                    
                    case obj_choice_bubble:
                        for(var ii=0;ii&lt;ds_list_size(choices);ii++)
                        {
                            var c = choices[|ii];
                            found = false;
                            show_debug_message(string(ii));
                            for(var iii=0;iii&lt;ds_list_size(copied);iii++)
                            {
                                if(c.output.link == copied[|iii].TUID)
                                {
                                    c.output.link = copied[|iii];
                                    found = true;
                                    break;
                                }
                            }
                            if(!found)
                                c.output.link = noone;
                        }
                    break;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bubbles
///*
var b = bubble_at_point(mouse_x,mouse_y);

//set mouse cursor
with(obj_parent_bubble) if(resize||drag){b=id; break;}

//if(b==noone &amp;&amp; !instance_number(obj_message)) window_set_cursor(cr_default);
//else
var cr = window_get_cursor();
with(b) if(object_index==obj_bubble &amp;&amp; (in_rect(mouse_x,mouse_y,x+width-10,y+height-10,10,10) || resize))
    window_set_cursor(cr_size_nwse);
else if(cr != cr_default &amp;&amp; cr != cr_none &amp;&amp; cr != cr_handpoint)
    window_set_cursor(cr_default);

if(b==noone &amp;&amp; cr != cr_default &amp;&amp; cr != cr_none &amp;&amp; cr != cr_handpoint)
{
    window_set_cursor(cr_default);
}


//deal with bubbles
if(b==noone)
{
    
    if(mouse_check_button_pressed(mb_left))
    {
        deselect_all(noone);
        //with(obj_parent_bubble) clicks = 0;
    }
}
else with(b)
{
    //clicked on
    if(mouse_check_button_pressed(mb_left))
    {
        var b2 = noone;
        with(obj_bubble) if(id != b &amp;&amp; selected &amp;&amp; color_picker != noone) {b2 = id; break;}
        if(b2 != noone)
        {
            b2.color_picker.hue = colour_get_hue(colour);
            b2.color_picker.colour = colour;
        }
        else
        {
            deselect_all(id);
            other.mheld = true;
            mxsel = mouse_x;
            mysel = mouse_y;
            mxoff = mouse_x-x;
            myoff = mouse_y-y;
            resize = in_rect(mouse_x,mouse_y,x+width-12,y+height-12,12,12);
        }
    }
    
    //dragged / resized
    if(resize)
    {
        deselect_all(id);
        width = max(minwidth,mouse_x-x+5);
        height = max(64,mouse_y-y+5);
        targetwidth = width;
        targetheight = height;
    }
    else if(other.mheld &amp;&amp; selected &amp;&amp; clicks&lt;=2 &amp;&amp; (abs(mxsel-mouse_x)&gt;2 || abs(mysel-mouse_y)&gt;2)) drag=true;
    if(drag)
    {
        deselect_all(id);
        x = mouse_x - mxoff;
        y = mouse_y - myoff;
        clicks = 0;
    }
    
    //released
    if(mouse_check_button_released(mb_left))
    {
        if(drag)deselect_all(noone);
        other.mheld = false;
        drag = false;
        resize = false;
    }
}
//*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Choices

var lh = noone;
//var ls = noone;

with(obj_choice_parent)
{
    if(link!=noone)
    {
        if(hover) lh = link;
        else if(selected) lh = link;//ls = link;
    }
}

if(!group_select) with(obj_parent_bubble)highlight = false;

if(lh!=noone) lh.highlight = true;
//if(ls!=noone) ls.highlight = true;


/*
var lst = ds_list_create();

with(obj_choice_parent)
{
    if((hover || selected) &amp;&amp; link!=noone &amp;&amp; ds_list_find_index(lst,link)==-1)
        ds_list_add(lst,link);
}

if(!group_select)
{
    for(var i=0;i&lt;ds_list_size(highlight_list);i++)
    {
        highlight_list[| i].highlight = false;
    }
}

if(ds_list_size(lst))
{
    for(var i=0;i&lt;ds_list_size(lst);i++)
    {
        lst[| i].highlight = true;
    }
}
else if(!group_select)with(obj_parent_bubble)highlight = false;

ds_list_copy(highlight_list,lst);
ds_list_destroy(lst);

*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///undo
///*
if(!instance_exists(obj_message_callback) &amp;&amp; !var_screen.visible &amp;&amp; !group_select)
{
    if((keyboard_check_released(vk_anykey) &amp;&amp; !keyboard_check_released(ord('Z'))
        &amp;&amp; !keyboard_check(vk_control) &amp;&amp; !keyboard_check_released(vk_control) ||
        mouse_check_button_released(mb_left)) &amp;&amp; !obj_scene_group.open)
    {
        with(obj_undo)
        {
            if(index&gt;0)
            {
                var lst = data_to_list();
                    var dat = ds_list_write(lst);
                if(dat != actions[|index-1] &amp;&amp; dat != string(actions[|index]))
                {
                    add_undo();
                }
            }
            else
            {
                add_undo();
            }
        }
    }
}
//*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///add new objects to the list...
with(obj_parent_bubble)
{
    if(ds_list_find_index(allbubbles,id)==-1)
    {
        ds_list_add(allbubbles,id);
    }
}
with(obj_choice_parent)
{
    if(ds_list_find_index(allchoices,id)==-1)
    {
        ds_list_add(allchoices,id);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ds_map_find_value(async_load, "id") == program_update)
{
    var status = ds_map_find_value(async_load, "status");
    if(status == 0)
    {
        var path = ds_map_find_value(async_load, "result");
        var version = "";
        ini_open(path);
            version = ini_read_string("version","number","0.0.0");
        ini_close();
        
        if(real(string_replace_all(version,".","")) &gt; real(string_replace_all(program_version,".","")))
        {
            show_message_async("There is an update available (v"+version+")");
            url_open("https://forum.choiceofgames.com/t/tool-chronicler-choicescript-visual-code-editor/6811");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamestats = obj_message_callback.tbox.text;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var s;
s = string_replace_all(obj_message_callback.tbox.text,"#","\#");
s = string_replace_all(s,chr(10),"#");

ChoiceScript = s;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamevars = obj_message_callback.tbox.text;
switch_GUI_mode(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//clear_clipboard();

ini_open("settings.ini");
    ini_write_real("autosave","shutdown",true);
    ini_write_string("project","last_save",project_path);
ini_close();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(group_select) draw_rectangle_colour(mx,my,mouse_x,mouse_y,c_orange,c_orange,c_orange,c_orange,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="113">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var cs = "";

var path = "C:\Users\Ben Seawalker\Documents\GameMaker\Builds\Chronicler\Dragon\startup.txt";//get_open_filename("txt|*.txt","startup.txt");
var f = FS_file_text_open_read(path);

    while(!FS_file_eof(f))
    {
        cs += FS_file_text_read_string(f)+chr(10);
        FS_file_text_readln(f);
    }
FS_file_text_close(f);


cs_to_data(cs,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
