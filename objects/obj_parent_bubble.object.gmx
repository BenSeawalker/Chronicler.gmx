<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scene = current_scene;
ds_list_add(current_scene.bubbles,id);
ds_list_add(allbubbles,id);
UID = get_new_UID();

start = (instance_number(obj_parent_bubble) == 1);

label = "label_"+string(UID);
switch(object_index)
{
    case obj_bubble:
        label = "bubble_"+string(UID);
    break;
    case obj_choice_bubble:
        label = "Choice_"+string(UID);
    break;
    case obj_condition:
        label = "condition_"+string(UID);
    break;
    case obj_action:
        label = "action_"+string(UID);
    break;
}


shift_y = 0;

selected = false;
highlight = false;
resize = false;
drag = false;
colour = c_teal;
clicks = 0;

right_selected = false;

group_selected = false;
group_xoff = 0;
group_yoff = 0;

mxoff = mouse_x-x;
myoff = mouse_y-y;
mxsel = mouse_x;
mysel = mouse_y;

depth = -UID;
startdepth = depth;

minwidth = 180;
targetwidth = 256;
targetheight = 128;

width = 0;
height = 0;

view_xprev = view_xview[0]+1;
view_yprev = view_yview[0]+1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
var from,to;
from = ds_list_create();
to = ds_list_create();

var mp = ds_map_create();

    with(obj_choice_parent) if(link == id) ds_list_add(from,id);
    switch(object_index)
    {
        case obj_bubble:
            ds_map_add(mp,"","");
        break;
        case obj_condition:
            
        break;
        case obj_action:
            
        break;
    }

    ds_map_add(mp,"type","delete_bubble");
    ds_map_add(mp,"object",object_index);
    ds_map_add(mp,"connections_from",from);
    ds_map_add(mp,"connections_to",to);
add_undo(mp);
*/

with(obj_choice_parent)
{
    if(owner == other.id) instance_destroy();
    else if(link == other.id) link = noone;
}

ds_list_delete(scene.bubbles,ds_list_find_index(scene.bubbles,id));
ds_list_delete(allbubbles,ds_list_find_index(allbubbles,id));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///visibility

if(view_xview[0] != view_xprev || view_yview[0] != view_yprev || group_selected)
    visible = group_selected || in_rect(x,y,view_xview[0]-width,view_yview[0]-height,view_wview[0]+width,view_hview[0]+height);
    
view_xprev = view_xview[0];
view_yprev = view_yview[0];

if(!visible || pause) exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///input
if(mouse_check_button_pressed(mb_right) &amp;&amp; in_rect(mouse_x,mouse_y,x,y,width,height))
{
    //if not invincible...
    if(!start)
    {
        deselect_all(noone);
        right_selected = true;
        create_flag(window_mouse_get_x(),window_mouse_get_y(),"Delete?",id,0);
    }
}

if(keyboard_check(vk_control) &amp;&amp; selected)
{
    if(keyboard_check_pressed(ord('D')))
    {
        switch(object_index)
        {
            case obj_bubble:
                with(instance_create(x,y+height+100,obj_bubble))
                {
                    title.text = other.title.text;
                        label = get_label(title.text,UID);
                    tbox.text = other.tbox.text;
                    colour = other.colour;
                    
                    targetwidth = other.width;
                    targetheight = other.height;
                    
                    var me = id;
                    for(var i=1;i&lt;ds_list_size(other.choices)-1;i++)
                    {
                        with(other.choices[|i])
                        {
                            var ch = create_choice("");
                                ch.owner = me;
                                ch.tbox.text = tbox.text;
                                ch.cbox.text = cbox.text;
                                ch.link = link;
                                ch.colour = colour;
                            add_choice_to_bubble(me,ch);
                        }
                    }
                    
                        other.clicks = 0;
                    clicks = 2;
                    textbox_focus = tbox;
                    deselect_all(id);
                    
                }
            break;
            case obj_condition:
                with(instance_create(x,y+height+50,obj_condition))
                {
                    tbox.text = other.tbox.text;
                    colour = other.colour;
                    
                    width = other.width;
                    height = other.height;
                    
                    out_true = other.out_true;
                    out_false = other.out_false;
                    
                        other.clicks = 0;
                    clicks = 2;
                    textbox_focus = tbox;
                    deselect_all(id);
                    
                }
            break;
            case obj_action:
                with(instance_create(x,y+height+50,obj_action))
                {
                    tbox.text = other.tbox.text;
                    colour = other.colour;
                    
                    width = other.width;
                    height = other.height;
                    
                    output.link = other.output.link;
                    
                        other.clicks = 0;
                    clicks = 2;
                    textbox_focus = tbox;
                    deselect_all(id);
                }
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///lerp
width = lerp(width,targetwidth,0.1*lag_time);
height = lerp(height,targetheight,0.1*lag_time);

if(group_selected)
{
    x = mouse_x - group_xoff;
    y = mouse_y - group_yoff;
    if(mouse_check_button_pressed(mb_left)) deselect_all(noone);
}
if(drag)
{
    depth = -9999999999;
}
else
{
    depth = startdepth;
}
/*else if(!drag)
{
    with(obj_parent_bubble)
    {
        if(id!=other.id &amp;&amp; !other.drag &amp;&amp; abs((x+width/2)-(other.x+other.width/2))&lt;max(width,other.width) &amp;&amp; abs((y+height/2)-(other.y+other.height/2))&lt;max(height,other.height))
        {
            if(collision_rect(x,y,width,height,other.x,other.y,other.width,other.height,12))
            {
                var dir = point_direction(x+width/2,y+height/2,other.x+other.width/2,other.y+other.height/2);
                other.x += lengthdir_x(16,dir);
                other.y += lengthdir_y(16,dir);
            }
        }
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///start
/*
if(instance_number(obj_parent_bubble) == 1)
    start = true;
    */
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///flag: delete
//add_undo();
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
