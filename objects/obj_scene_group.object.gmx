<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scene_count = 1;

scenes = ds_list_create();

//carousel
sv[0] = noone;
sv[1] = current_scene;
sv[2] = noone;

spin_up = false;
spin_down = false;

rotation = 90;

carousel = true;
hold_time = 0;
held = false;
open = false;

scroll_time = 0;

//inline
width = 72;
height = 600;

y_off = 0;
my_off = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///carousel
var vw = window_get_width();
if(carousel)
{
    var cm,ct,cmi;
        cm = c_menu;
        ct = c_text;
        cmi = c_menu;
    var mx,my;
        mx = window_mouse_get_x();
        my = window_mouse_get_y();
    var rad,rad2;
        rad = 32;
            var w1,w2,w3;
            if(sv[0]!=noone) w1 = sv[0].width else w1 = 0;
            if(sv[1]!=noone) w2 = sv[1].width else w2 = 0;
            if(sv[2]!=noone) w3 = sv[2].width else w3 = 0;
        rad2 = max(w1,w2,w3);
    
    draw_sprite_ext(spr_light,0,x,y,8,8,0,c_white,.1);    
    
    var max_time = room_speed/4;
    
    open = (!is_drag(obj_parent_bubble) &amp;&amp; !is_selected(obj_parent_bubble) &amp;&amp; !group_select &amp;&amp; (hold_time&gt;=max_time || in_ellipse(mx,my,vw,y,rad2*2,rad2*2)));//in_rect(mx,my,x-rad2*2,y-rad2*2,rad2*3,rad2*3))
    
    if(open)
        x = lerp(x,vw-rad/4,0.1*lag_time);
    else
        x = lerp(x,vw+rad2*2,0.1*lag_time);

    y = window_get_height()/2;
    if(!open &amp;&amp; window_get_cursor() == cr_none) window_set_cursor(cr_default);
    if(!open) draw_arrow_colour(vw-10,y,vw-26,y,16,cm);
    
if(open)
{
    if(mouse_check_button(mb_left) &amp;&amp; hold_time&lt;max_time)
    {
        with(current_scene)
        {
            if(editable &amp;&amp; title.read_only &amp;&amp; in_ellipse(mx,my,x,y,width,height))
            {
                other.hold_time += lag_time;
            }
            else
            {
                other.hold_time = 0;
            }
        }
    }
        
        //carousel
        var cs = c_black;
        if(in_ellipse(mx,my,x,y,rad,rad) &amp;&amp; hold_time&lt;max_time) cs = c_orange; //rad *= 1.1}
        
        //draw center --------------------------
        draw_circle_colour(x,y,rad,cm,cm,false);
        draw_circle_colour(x,y,rad,cs,cs,true);
        draw_text_centered(x-rad/4,y,"+",ct);
        
        //center input...
            if(mouse_check_button_pressed(mb_left) &amp;&amp; hold_time&lt;max_time &amp;&amp; open)
            {
                if(cs == c_orange)
                {
                    add_undo();
                    
                    scene_count++;
                    var s = create_scene(x+rad,y,"scene_"+string(scene_count),true);
                    add_scene_to_group(id,s);
                    change_scene(s);
                    
                    with(instance_create(vw/2,room_height/4,obj_bubble))
                    {
                        title.text = "Start";
//                        label = get_label(title.text,UID);
                        start = true;
                    }
                }
            }
        //--------------------------------------
        
        //draw radius
        draw_circle_colour(x,y,rad2,cm,cm,true);
        //draw_sprite_stretched(spr_icons,111,x-16,y-rad-16,16,16);
        //(x-rad2-10-sv[1].width/2,y,x-rad2-26-sv[1].width/2,y,16,cm);
        
        
    if(hold_time&lt;max_time &amp;&amp; open)
    {     
        //draw scenes;
        var ind = ds_list_find_index(scenes,current_scene);
        var cind = ds_list_find_index(scenes,sv[1]);
        
        var u,d;
            u = (in_rect(mx,my,x-rad2*2,y-rad2/4,rad2,-rad2/2) &amp;&amp; ind&gt;0);
            d = (in_rect(mx,my,x-rad2*2,y+rad2/4,rad2,rad2/2) &amp;&amp; ind&lt;ds_list_size(scenes)-1);
            if((u || d))
            {
                if(window_get_cursor() != cr_none) window_set_cursor(cr_none);
            }
            else if(current_scene.hover &amp;&amp; current_scene.editable) window_set_cursor(cr_handpoint);
            else if(window_get_cursor() != cr_default &amp;&amp; !current_scene.hover) window_set_cursor(cr_default);
            
            if(u) draw_arrow_colour(mx,my,mx,my-24,24,cm);
            if(d) draw_arrow_colour(mx,my,mx,my+24,24,cm);
        //set movement
        max_stime = room_speed/10;
        if(open &amp;&amp; mouse_check_button(mb_left))
        {
            if(scroll_time++ &gt; max_stime)
            {
                scroll_time = 0;
                if(u)
                {
                    change_scene(scenes[|--ind]);
                }
                if(d)
                {
                    change_scene(scenes[|++ind]);
                }
            }
        }
        
        spin_up = (ind&lt;cind);
        spin_down = (ind&gt;cind);
        var su,sd;
        su = spin_up*abs(ind-cind);
        sd = spin_down*abs(ind-cind);
        rotation += su*lag_time;
        rotation -= sd*lag_time;
        if(abs(rotation) &gt;= 180-25*open || rotation &lt;= 0+25*open)
        {
            if(spin_up) cind--;
            if(spin_down) cind++;
            
            rotation = 90;
            
            sv[1] = scenes[| cind];
        }
        
        if(cind&gt;0) sv[0] = scenes[| cind-1]; else sv[0] = noone;
        if(cind&lt;ds_list_size(scenes)-1) sv[2] = scenes[| cind+1]; else sv[2] = noone;
        
        
        for(var i=0;i&lt;3;i++;)
        {
            if(sv[i] != noone &amp;&amp; sv[i])
            {
                var w,h,a;
                    w = sv[i].width;
                    h = sv[i].height;
                    a = rotation+90*i+25*(1-i)*open;
                var dx = x+lengthdir_x(rad2,a);
                var dy = y+lengthdir_y(rad2,a);
                sv[i].x = dx;
                sv[i].y = dy;
                
                //draw_ellipse_colour(dx-w/2,dy-h/2,dx+w/2,dy+h/2,cm,cm,false);
                draw_roundrect_colour(dx-w/2,dy-h/2,dx+w/2,dy+h/2,cm,cm,false);
                textbox_draw(sv[i].title,dx-w/2+5,dy-h/2+5,dx+w/2,dy+h/2,true);
                
                sv[i].hover = in_rect(mx,my,dx-w/2,dy-h/2,w,h);
                var csel = c_black;
                if(sv[i].hover &amp;&amp; sv[i] != current_scene) csel = c_orange;
                    draw_roundrect_colour(dx-w/2,dy-h/2,dx+w/2,dy+h/2,csel,csel,true);
                    
                    //if(sv[i].hover &amp;&amp; sv[i] == current_scene &amp;&amp; window_get_cursor() != cr_handpoint) window_set_cursor(cr_handpoint);
                
                sv[i].clicks *= sv[i].hover;
                if(!sv[i].clicks) sv[i].title.read_only = true;
                
                if(mouse_check_button_pressed(mb_left))
                {
                    if(sv[i].hover)
                    {
                        if(sv[i].clicks++ &lt; 1)
                        {
                            change_scene(sv[i]);
                        }
                        else if(sv[i].editable)
                        {
                            sv[i].title.read_only = false;
                        }
                    }
                    else if(!sv[i].hover)
                    {
                        sv[i].clicks = 0;
                        sv[i].title.read_only = true;
                    }
                }
                if(mouse_check_button(mb_right) &amp;&amp; sv[i].hover &amp;&amp; sv[i].editable)
                {
                    delete_scene(sv[i]);
                    sv[i] = noone;
                }
                with(sv[i])
                {
                    if(!title.read_only &amp;&amp; textbox_focus == title)
                    {
                        if(keyboard_check(vk_anykey))
                            path = "";
                    }
                    else title.start = 0;
                }
            }
        }
    }
    else if(open)//move_scenes
    {
        open = true;
        window_set_cursor(cr_none);
        group_select = false;
        obj_ctrl.can_group = false;
        obj_ctrl.mx = mouse_x;
        obj_ctrl.my = mouse_y;
        
        
        var ind,ind_t,ind_b;
            ind = ds_list_find_index(scenes,current_scene);
            ind_t = max(0,ind-4);
            ind_b = min(ind_t+7,ds_list_size(scenes)-1);
            ind_t = max(0,ind_b-7);
        var w,h;
            w = scenes[|ind].width;
            h = scenes[|ind].height;
        
        draw_set_alpha(0.5);
            draw_rectangle_colour(x-rad2*2,y-h*4,x-rad2*2+w+10,y+h*4,cm,cm,cm,cm,false);
        draw_set_alpha(1);
        
        if(!held)
        {
            my_off = my-other.y-h*4+h*(ind-ind_t);
        }
        var i_point = ind_t+floor((my+my_off-(y-h*4))/h);
            i_point = clamp(i_point,max(ind_t,1),ind_b);
        if(!held)
        {
            held = true;
            if(i_point &gt; ind) my_off -= h+12;
            if(i_point &lt; ind) my_off += h+12;
            deselect_scenes(noone);
        }
            
        if(my&lt;100 || my&gt;room_height-100)
        {
            window_mouse_set(mx,room_height/2);
            my = room_height/2;
            my_off = my-other.y-h*4+h*(i_point-ind_t);
        }
        
        
        with(current_scene)
        {
            x = lerp(x,other.x-rad2*2+5,0.05*lag_time);
            y = lerp(y,other.y-h*4+h*(i_point-ind_t),0.05*lag_time);
            
            draw_rectangle_colour(x,y,x+width,y+height,cmi,cmi,cmi,cmi,false);
            textbox_draw_simple(title,x+5,y+5,x+width-5,y+height-5);
        }
        
        var ii = -1;//-1+(ind-4&gt;0);
        for(var i=ind_t;i&lt;=ind_b;i++)
        {
            var offset = (h+10)*(i&gt;=i_point);
                if(i&gt;ind) offset = (h+10)*(i&gt;i_point);
            if(i != ind)
            {
                ii++;
                with(scenes[|i])
                {
                    x = lerp(x,other.x-rad2*2+5,0.05*lag_time);
                    y = lerp(y,other.y-h*4+h*ii+offset,0.05*lag_time);
                    draw_set_alpha(0.5);
                        draw_rectangle_colour(x,y,x+width,y+height,cmi,cmi,cmi,cmi,false);
                        textbox_draw_simple(title,x+5,y+5,x+width-5,y+height-5);
                    draw_set_alpha(1);
                }
            }
        }
        
        if(mouse_check_button_released(mb_left))
        {
            ds_list_delete(scenes,ind);
            ds_list_insert(scenes,i_point,current_scene);
            window_mouse_set(x-rad2,y);
        }
    }
    if(mouse_check_button_released(mb_left)) {hold_time = 0; held = false;}
}
}







</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
