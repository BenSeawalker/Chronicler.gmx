<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>title = "Menu";

width = 64*3;
height = 64*5;
minh = 0;
maxh = 64*5;

smw = 48;
smh = 32;
sminw = string_width(title)+8;
sminh = 32;
smaxw = sminw+6;
smaxh = sminh+6;
stw = sminw;
sth = sminh;

vertical = false;
top = false;
left = true;

opened = false;

colour = c_menu;

components = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///input

var hover = in_rect(window_mouse_get_x(),window_mouse_get_y(),x+width,y,smw,smh);
hover = (hover || in_rect(window_mouse_get_x(),window_mouse_get_y(),x,y,width,height));

if(mouse_check_button_pressed(mb_left))
{
    //if(hover)   opened = !opened;
    //else        opened = false;
    opened = hover;
}

if(hover)
{
    stw = smaxw;
    sth = smaxh;
}
else
{
    stw = sminw;
    sth = sminh;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///interpolate
smw = lerp(smw,stw,0.1);
smh = lerp(smh,sth,0.1);

if(opened)
{
    if(!vertical)
    {
        x = lerp(x,xstart,0.1);
        height = lerp(height,maxh,0.1);
    }
}
else
{
    if(!vertical)
    {
        if(left)
            x = lerp(x,xstart-width,0.1);
        else
            x = lerp(x,xstart+width,0.1);
            
        height = lerp(height,0,0.1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///components
var ch;
ch = 32;
for(var i=0;i&lt;ds_list_size(components);i++)
{
    with(components[| i])
    {
        x = (other.x+other.width/2) - width/2;
        y = other.y+ch;
        ch += height+8;
        visible = other.opened;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw body
draw_roundrect_colour(x,y,x+width,y+height,colour,colour,false);

//draw handle
draw_rectangle_colour(x+width-10,y,x+width+smw,y+smh,colour,colour,colour,colour,false);
draw_text_centered(x+width+smw/2,y+smh/2,title,c_text);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
